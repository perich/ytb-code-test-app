YourTradeBase Code Test
=======================

Instructions
------------

This is a very simple rails application that allows users to manage a list of books. The app mainly contains rails auto generated scaffold code, however some code has been added to allow books to be managed via the users show page. This code has not been written very well! We would like you to refactor the code in order to make the code more maintainable and to be written in a style more suited to a well written rails application. There has also been a complaint from some end users that the site is slow to respond occasionally when creating new users. The application has some basic Rspec tests that can be run using the `rspec` command.

Please spend no more than 2 hours on the exercise excluding any time it takes to install the required software such as ruby, gems etc.

We would like you to keep a record of your thought process and actions taken in order to prepare the application and refactor the code, please be as detailed as possible. You should include your explanations as to why the code you have found is badly written and how you think your refactored code will improve the codebase.

We are interested mainly in your thought process through the exercise, don't worry if you don't manage to complete the refactoring in the time allowed, you may add any suggestions for further refactoring you would wish to carry out if you had more time.

Your taske are:

1. Fork this git repository to your own github account then clone it
2. Install the correct ruby version for the project using a ruby version manager of your choice
3. Install the required gems for the project using bundler
5. Setup the applications database
6. Identify code to be refactored
7. Create appropriate commits for your refactored code
8. Create 1 commit with your notes
9. Push the commits to your github repository
10. Provide us with the url of your github fork of the app

Please add your notes below.

Notes
-----
- Step 1: Move book actions into a books_controller. A user controller should not be creating/destroying the book model. 

- Step 2: remove instance variable from partial/simplify syntax. This makes partials more portable, as they dont rely on a specific instance variable.

- Step 3: Move admin email into a model method. I didn't add this to an after_create hook as code that has lots of hooks can be harder to test and maintain. I think it's hard to ever say we ALWAYS want to do something, better to explicitly call a method than set a callback

- Step 4: send email as deliver_later. This will speed up the user create action a bit.

Further Refactoring: I might consider seperating the User and Book models completely and having a join table for UserBooks.
I think in this example it's premature as I'm not really sure if these are books the user has written or read. If its read then a many-to-many relationship makes more sense. It it's written then one-to-many is fine. Until I know more about the purpose of the app, I'll leave it as is.